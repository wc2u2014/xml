<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-sftp="http://www.springframework.org/schema/integration/sftp"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans classpath:xsd/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context classpath:xsd/spring-context-4.0.xsd
		http://www.springframework.org/schema/integration/sftp   classpath:xsd/spring-integration-sftp.xsd
		http://www.springframework.org/schema/util classpath:xsd/spring-util-3.0.xsd">

 	<context:property-placeholder
		ignore-resource-not-found="true"
		location="file:${PATH_PROPERTIES_INTEGRATOR}/ConfiguracionFTP/ConfiguracionFTP.properties" />
	<bean id="log4jInitialization"
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"  lazy-init="false">
		<property name="targetClass" value="org.springframework.util.Log4jConfigurer" />
		<property name="targetMethod" value="initLogging" />
		<property name="arguments">
			<list>
				<value>file:${PATH_PROPERTIES_INTEGRATOR}/ConfiguracionFTP/ConfiguracionFTP-log4j.xml</value>
			</list>
		</property>
	</bean> 
	<!-- <context:property-placeholder
		ignore-resource-not-found="true"
		location="file:/u01/Admin/applications/config/CO_FINEQUIPOS_OSB_PR/config/ConfiguracionFTP/ConfiguracionFTP.properties" /> --> 
	<bean id="ftpClientFactorybsc" class="org.springframework.integration.sftp.session.DefaultSftpSessionFactory">	
		<property name="host" value="${ftpBscs.host}"/>
		<property name="port" value="${ftpBscs.port}"/>
		<property name="user" value="${ftpBscs.username}"/>	
		<property name="password" value="${ftpBscs.password}"/>
		<property name="allowUnknownKeys" value="true" />
	</bean>
	<bean id="csfbscs" 	class="org.springframework.integration.file.remote.session.CachingSessionFactory">
		<constructor-arg ref="ftpClientFactorybsc" />		
		<property name="poolSize" value="${ftpBscs.sessionCacheSize}" />
		<property name="sessionWaitTimeout" value="${ftpBscs.sessionWaitTimeout}" />
	</bean>	
	<!-- BATCH ACTIVACIONES -->
	<int-sftp:inbound-channel-adapter id="ftpInboundActivacionesBSCS"
		channel="ftpchannelActivacionesBSCS" session-factory="csfbscs"
		filename-regex="${ftpActivaciones.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpActivaciones.deleteRemoteFile}"
		remote-directory="${ftpActivaciones.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpActivaciones.localdirectory}">
		<int:poller cron="${ftpActivaciones.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelActivacionesBSCS">
		<int:queue />
	</int:channel>
	<!-- BATCH CAMPAÃ‘AS FACTURACION -->
	<int-sftp:inbound-channel-adapter id="ftpInboundCFacturacion"
		channel="ftpchannelCFacturacion" session-factory="csfbscs"
		filename-regex="${ftpCFacturacion.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpCFacturacion.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpCFacturacion.localdirectory}">
		<int:poller cron="${ftpCFacturacion.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelCFacturacion">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSCFacturacion"
		session-factory="csfbscs" request-channel="ftpchannelCFacturacion"
		reply-channel="ftpChannelOutCFacturacion" command="mv"
		expression="'${ftpCFacturacion.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpCFacturacion.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutCFacturacion">
		<int:queue />
	</int:channel>
	<!-- BATCH NOVEDADES NO MONETARIAS -->
	<int-sftp:inbound-channel-adapter id="ftpInboundNNMonetarias"
		channel="ftpchannelNNMonetarias" session-factory="csfbscs"
		filename-regex="${ftpNNMonetarias.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpNNMonetarias.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpNNMonetarias.localdirectory}">
		<int:poller cron="${ftpNNMonetarias.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelNNMonetarias">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSNNMonetarias"
		session-factory="csfbscs" request-channel="ftpchannelNNMonetarias"
		reply-channel="ftpChannelOutNNMonetarias" command="mv"
		expression="'${ftpNNMonetarias.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpNNMonetarias.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutNNMonetarias">
		<int:queue />
	</int:channel>
	<!-- BATCH RECAUDOS BANCOS -->
	<int-sftp:inbound-channel-adapter id="ftpInboundRecaudosBancos"
		channel="ftpchannelRecaudosBancos" session-factory="csfbscs"
		filename-regex="${ftpRecaudoBancos.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpRecaudoBancos.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpRecaudoBancos.localdirectory}">
		<int:poller cron="${ftpRecaudoBancos.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelRecaudosBancos">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSRecaudosBancos"
		session-factory="csfbscs" request-channel="ftpchannelRecaudosBancos"
		reply-channel="ftpChannelOutRecaudoBancos" command="mv"
		expression="'${ftpRecaudoBancos.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpRecaudoBancos.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutRecaudoBancos">
		<int:queue />
	</int:channel>
	<!-- BATCH FRANQUICIAS -->
	<int-sftp:inbound-channel-adapter id="ftpInboundFranquicias"
		channel="ftpchannelFranquicias" session-factory="csfbscs"
		filename-regex="${ftpFranquicias.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpFranquicias.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpFranquicias.localdirectory}">
		<int:poller cron="${ftpFranquicias.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelFranquicias">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSFranquicias"
		session-factory="csfbscs" request-channel="ftpchannelFranquicias"
		reply-channel="ftpChannelOutFranquicias" command="mv"
		expression="'${ftpFranquicias.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpFranquicias.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutFranquicias">
		<int:queue />
	</int:channel>
	<!-- BATCH RECAUDO SICACOM -->
	<int-sftp:inbound-channel-adapter id="ftpInboundRSicacom"
		channel="ftpchannelRSicacom" session-factory="csfbscs"
		filename-regex="${ftpReacudoSicacom.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpReacudoSicacom.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpReacudoSicacom.localdirectory}">
		<int:poller cron="${ftpReacudoSicacom.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelRSicacom">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSRSicacom"
		session-factory="csfbscs" request-channel="ftpchannelRSicacom"
		reply-channel="ftpChannelOutRSicacom" command="mv"
		expression="'${ftpReacudoSicacom.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpReacudoSicacom.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutRSicacom">
		<int:queue />
	</int:channel>
	<!-- BATCH RECAUDO BANCOS RR -->
	<int-sftp:inbound-channel-adapter id="ftpInboundRecaudoRR"
		channel="ftpchannelRecaudoRR" session-factory="csfbscs"
		filename-regex="${ftpRecaudoRR.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpRecaudoRR.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpRecaudoRR.localdirectory}">
		<int:poller cron="${ftpRecaudoRR.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelRecaudoRR">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSRecaudoRR"
		session-factory="csfbscs" request-channel="ftpchannelRecaudoRR"
		reply-channel="ftpChannelOutRecaudoRR" command="mv"
		expression="'${ftpRecaudoRR.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpRecaudoRR.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutRecaudoRR">
		<int:queue />
	</int:channel>
	<!-- BATCH RECAUDO PAGOS EN LINEA RR -->
	<int-sftp:inbound-channel-adapter id="ftpInboundRecaudoPagoLineaRR"
		channel="ftpchannelRecaudoPagoLineaRR" session-factory="csfbscs"
		filename-regex="${ftpRecaudoPagoLineaRR.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpRecaudoPagoLineaRR.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpRecaudoPagoLineaRR.localdirectory}">
		<int:poller cron="${ftpRecaudoPagoLineaRR.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelRecaudoPagoLineaRR">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSRecaudoPagoLineaRR"
		session-factory="csfbscs" request-channel="ftpchannelRecaudoPagoLineaRR"
		reply-channel="ftpChannelOutRecaudoPagoLineaRR" command="mv"
		expression="'${ftpRecaudoPagoLineaRR.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpRecaudoPagoLineaRR.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutRecaudoPagoLineaRR">
		<int:queue />
	</int:channel>	
	<!-- BATCH PAGOS NO ABONADOS -->
	<int-sftp:inbound-channel-adapter id="ftpInboundPagosNoAbonadosBSCS"
		channel="ftpchannelPagosNoAbonadosBSCS" session-factory="csfbscs"
		filename-regex="${ftpPagosNoAbonados.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpPagosNoAbonados.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpPagosNoAbonados.localdirectory}">
		<int:poller cron="${ftpPagosNoAbonados.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelPagosNoAbonadosBSCS">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSftpChannelOutPagosNoAbonadosBSCS"
		session-factory="csfbscs" request-channel="ftpchannelPagosNoAbonadosBSCS"
		reply-channel="ftpChannelOutPagosNoAbonadosBSCS" command="mv"
		expression="'${ftpPagosNoAbonados.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpPagosNoAbonados.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutPagosNoAbonadosBSCS">
		<int:queue />
	</int:channel>	
	<!-- BATCH SALDOS A FAVOR CLARO-->
	<int-sftp:inbound-channel-adapter id="ftpInboundCancelacionSaldosFavorClaroBSCS"
		channel="ftpchannelCancelacionSaldosFavorClaroBSCS" session-factory="csfbscs"
		filename-regex="${ftpSaldosaFavorClaro.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpSaldosaFavorClaro.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpSaldosaFavorClaro.localdirectory}">
		<int:poller cron="${ftpSaldosaFavorClaro.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelCancelacionSaldosFavorClaroBSCS">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSftpCancelacionSaldosFavorClaroBSCS"
		session-factory="csfbscs" request-channel="ftpchannelCancelacionSaldosFavorClaroBSCS"
		reply-channel="ftpChannelOutCancelacionSaldosFavorClaroBSCS" command="mv"
		expression="'${ftpSaldosaFavorClaro.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpSaldosaFavorClaro.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutCancelacionSaldosFavorClaroBSCS">
		<int:queue />
	</int:channel>
	<!-- BATCH ASJUSTES ASCARD-->
	<int-sftp:inbound-channel-adapter id="ftpInboundAjustesAscardBSCS"
		channel="ftpchannelAjustesAscardBSCS" session-factory="csfbscs"
		filename-regex="${ftpAjustesAscard.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpAjustesAscard.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpAjustesAscard.localdirectory}">
		<int:poller cron="${ftpAjustesAscard.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelAjustesAscardBSCS">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSftpAjustesAscardBSCS"
		session-factory="csfbscs" request-channel="ftpchannelAjustesAscardBSCS"
		reply-channel="ftpChannelOutAjustesAscardBSCS" command="mv"
		expression="'${ftpAjustesAscard.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpAjustesAscard.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutAjustesAscardBSCS">
		<int:queue />
	</int:channel>
	<!-- BATCH ASJUSTES PNA ASCARD-->
	<int-sftp:inbound-channel-adapter id="ftpInboundAjustesAscardPNABSCS"
		channel="ftpchannePNAlAjustesAscardBSCS" session-factory="csfbscs"
		filename-regex="${ftpAjustesAscard.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpAjustesAscard.remotedirectoryPN}" temporary-file-suffix=".writing"
		local-directory="${ftpAjustesAscard.localdirectory}">
		<int:poller cron="${ftpAjustesAscard.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannePNAlAjustesAscardBSCS">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSftpAjustesAscarPNAdBSCS"
		session-factory="csfbscs" request-channel="ftpchannePNAlAjustesAscardBSCS"
		reply-channel="ftpChannelOutAjustesAscardPNABSCS" command="mv"
		expression="'${ftpAjustesAscard.remotedirectoryPN}'+payload.getName()"
		rename-expression="'${ftpAjustesAscard.remotedirectoryCopyPN}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutAjustesAscardPNABSCS">
		<int:queue />
	</int:channel>
	<!-- BATCH ACELARION MODIFICACION ESTADO-->
	<int-sftp:inbound-channel-adapter id="ftpInboundAcelarionMEBSCS"
		channel="ftpchannelAcelarionMEBSCS" session-factory="csfbscs"
		filename-regex="${ftpAceleracion.filenamePatternME}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpAceleracion.remotedirectoryME}" temporary-file-suffix=".writing"
		local-directory="${ftpAceleracion.localdirectory}">
		<int:poller cron="${ftpAceleracion.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelAcelarionMEBSCS">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSftpAcelarionMEBSCS"
		session-factory="csfbscs" request-channel="ftpchannelAcelarionMEBSCS"
		reply-channel="ftpChannelOutAcelarionMEBSCS" command="mv"
		expression="'${ftpAceleracion.remotedirectoryME}'+payload.getName()"
		rename-expression="'${ftpAceleracion.remotedirectoryCopyME}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutAcelarionMEBSCS">
		<int:queue />
	</int:channel>
	<!-- BATCH ACELARION EXCLUCION DE ACELARION-->
	<int-sftp:inbound-channel-adapter id="ftpInboundAcelarionEABSCS"
		channel="ftpchannelAcelarionEABSCS" session-factory="csfbscs"
		filename-regex="${ftpAceleracion.filenamePatternEA}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpAceleracion.remotedirectoryEA}" temporary-file-suffix=".writing"
		local-directory="${ftpAceleracion.localdirectory}">
		<int:poller cron="${ftpAceleracion.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelAcelarionEABSCS">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSftpAcelarionEABSCS"
		session-factory="csfbscs" request-channel="ftpchannelAcelarionEABSCS"
		reply-channel="ftpChannelOutAcelarionEABSCS" command="mv"
		expression="'${ftpAceleracion.remotedirectoryEA}'+payload.getName()"
		rename-expression="'${ftpAceleracion.remotedirectoryCopyEA}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutAcelarionEABSCS">
		<int:queue />
	</int:channel>
	<!-- BATCH ACELARION FLAG NUNCA-->
	<int-sftp:inbound-channel-adapter id="ftpInboundAcelarionFNBSCS"
		channel="ftpchannelAcelarionFNBSCS" session-factory="csfbscs"
		filename-regex="${ftpAceleracion.filenamePatternFN}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpAceleracion.remotedirectoryFN}" temporary-file-suffix=".writing"
		local-directory="${ftpAceleracion.localdirectory}">
		<int:poller cron="${ftpAceleracion.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelAcelarionFNBSCS">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSftpAcelarionFNBSCS"
		session-factory="csfbscs" request-channel="ftpchannelAcelarionFNBSCS"
		reply-channel="ftpChannelOutAcelarionFNBSCS" command="mv"
		expression="'${ftpAceleracion.remotedirectoryFN}'+payload.getName()"
		rename-expression="'${ftpAceleracion.remotedirectoryCopyFN}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutAcelarionFNBSCS">
		<int:queue />
	</int:channel>
	<!-- BATCH ACELARION FLAG NO COBRO-->
	<int-sftp:inbound-channel-adapter id="ftpInboundAcelarionFNCBSCS"
		channel="ftpchannelAcelarionFNCBSCS" session-factory="csfbscs"
		filename-regex="${ftpAceleracion.filenamePatternFNC}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpAceleracion.remotedirectoryFNC}" temporary-file-suffix=".writing"
		local-directory="${ftpAceleracion.localdirectory}">
		<int:poller cron="${ftpAceleracion.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelAcelarionFNCBSCS">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSftpAcelarionFNCBSCS"
		session-factory="csfbscs" request-channel="ftpchannelAcelarionFNCBSCS"
		reply-channel="ftpChannelOutAcelarionFNCBSCS" command="mv"
		expression="'${ftpAceleracion.remotedirectoryFNC}'+payload.getName()"
		rename-expression="'${ftpAceleracion.remotedirectoryCopyFNC}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutAcelarionFNCBSCS">
		<int:queue />
	</int:channel>
	<!-- BATCH ANULACION BANCOS -->
	<int-sftp:inbound-channel-adapter id="ftpInboundAnulacionesBancosBSCS"
		channel="ftpchannelAnulacionesBancosBSCS" session-factory="csfbscs"
		filename-regex="${ftpAnulacionBancos.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpAnulacionBancos.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpAnulacionBancos.localdirectory}">
		<int:poller cron="${ftpAnulacionBancos.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelAnulacionesBancosBSCS">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSftpChannelOutAnulacionesBancosBSCS"
		session-factory="csfbscs" request-channel="ftpchannelAnulacionesBancosBSCS"
		reply-channel="ftpChannelOutAnulacionesBancosBSCS" command="mv"
		expression="'${ftpAnulacionBancos.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpAnulacionBancos.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutAnulacionesBancosBSCS">
		<int:queue />
	</int:channel>	
	<!-- BATCH ANULACION SICACOM -->
	<int-sftp:inbound-channel-adapter id="ftpInboundAnulacionesSICACOMBSCS"
		channel="ftpchannelAnulacionesSICACOMBSCS" session-factory="csfbscs"
		filename-regex="${ftpAnulacionSICACOM.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpAnulacionSICACOM.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpAnulacionSICACOM.localdirectory}">
		<int:poller cron="${ftpAnulacionSICACOM.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelAnulacionesSICACOMBSCS">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSftpChannelOutAnulacionesSICACOMBSCS"
		session-factory="csfbscs" request-channel="ftpchannelAnulacionesSICACOMBSCS"
		reply-channel="ftpChannelOutAnulacionesSICACOMBSCS" command="mv"
		expression="'${ftpAnulacionSICACOM.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpAnulacionSICACOM.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutAnulacionesSICACOMBSCS">
		<int:queue />
	</int:channel>		
	<!-- BATCH ANULACION RECAUDO RR -->
	<int-sftp:inbound-channel-adapter id="ftpInboundAnulacionesRecaudoRRBSCS"
		channel="ftpchannelAnulacionesRecaudoRRBSCS" session-factory="csfbscs"
		filename-regex="${ftpAnulacionRecaudoRR.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpAnulacionRecaudoRR.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpAnulacionRecaudoRR.localdirectory}">
		<int:poller cron="${ftpAnulacionRecaudoRR.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelAnulacionesRecaudoRRBSCS">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSftpChannelOutAnulacionesRecaudoRRBSCS"
		session-factory="csfbscs" request-channel="ftpchannelAnulacionesRecaudoRRBSCS"
		reply-channel="ftpChannelOutAnulacionesRecaudoRRBSCS" command="mv"
		expression="'${ftpAnulacionRecaudoRR.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpAnulacionRecaudoRR.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutAnulacionesRecaudoRRBSCS">
		<int:queue />
	</int:channel>		
	<!-- BATCH NOVEDADES NO MONETARIAS V2 -->
	<int-sftp:inbound-channel-adapter id="ftpInboundNovedadesNoMonetariasv2BSCS"
		channel="ftpchannelNovedadesNoMonetariasv2BSCS" session-factory="csfbscs"
		filename-regex="${ftpNovedadesNoMonetariasv2.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpNovedadesNoMonetariasv2.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpNovedadesNoMonetariasv2.localdirectory}">
		<int:poller cron="${ftpNovedadesNoMonetariasv2.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelNovedadesNoMonetariasv2BSCS">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSftpChannelOutNovedadesNoMonetariasv2BSCS"
		session-factory="csfbscs" request-channel="ftpchannelNovedadesNoMonetariasv2BSCS"
		reply-channel="ftpChannelOutNovedadesNoMonetariasv2BSCS" command="mv"
		expression="'${ftpNovedadesNoMonetariasv2.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpNovedadesNoMonetariasv2.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutNovedadesNoMonetariasv2BSCS">
		<int:queue />
	</int:channel>		
	<!-- BATCH REGISTRAR BENEFICIO -->
	<int-sftp:inbound-channel-adapter id="ftpInboundRegistrarBeneficioBSCS"
		channel="ftpchannelRegistrarBeneficioBSCS" session-factory="csfbscs"
		filename-regex="${ftpRegistrarBeneficio.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpRegistrarBeneficio.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpRegistrarBeneficio.localdirectory}">
		<int:poller cron="${ftpRegistrarBeneficio.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelRegistrarBeneficioBSCS">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSftpChannelOutRegistrarBeneficioBSCS"
		session-factory="csfbscs" request-channel="ftpchannelRegistrarBeneficioBSCS"
		reply-channel="ftpChannelOutRegistrarBeneficioBSCS" command="mv"
		expression="'${ftpRegistrarBeneficio.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpRegistrarBeneficio.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutRegistrarBeneficioBSCS">
		<int:queue />
	</int:channel>
	<!-- BATCH AJUSTE FTP -->
	<int-sftp:inbound-channel-adapter id="ftpInboundAjusteFTPBSCS"
		channel="ftpchannelAjusteFTPBSCS" session-factory="csfbscs"
		filename-regex="${ftpAjusteFTP.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpAjusteFTP.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpAjusteFTP.localdirectory}">
		<int:poller cron="${ftpAjusteFTP.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelAjusteFTPBSCS">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSftpChannelOutAjusteFTPBSCS"
		session-factory="csfbscs" request-channel="ftpchannelAjusteFTPBSCS"
		reply-channel="ftpChannelOutAjusteFTPBSCS" command="mv"
		expression="'${ftpAjusteFTP.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpAjusteFTP.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutAjusteFTPBSCS">
		<int:queue />
	</int:channel>

	<!-- BATCH CREDITOS CASTIGADOS -->
	<int-sftp:inbound-channel-adapter id="ftpInboundCreditosCastigadosBSCS"
		channel="ftpchannelCreditosCastigadosBSCS" session-factory="csfbscs"
		filename-regex="${ftpCreditosCastigados.filenamePattern}"
		auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
		remote-directory="${ftpCreditosCastigados.remotedirectory}" temporary-file-suffix=".writing"
		local-directory="${ftpCreditosCastigados.localdirectory}">
		<int:poller cron="${ftpCreditosCastigados.cronExpressionInboud}"
			max-messages-per-poll="-1" />
	</int-sftp:inbound-channel-adapter>
	<int:channel id="ftpchannelCreditosCastigadosBSCS">
		<int:queue />
	</int:channel>
	<int-sftp:outbound-gateway id="remoteftpLSftpChannelOutCreditosCastigadosBSCS"
		session-factory="csfbscs" request-channel="ftpchannelCreditosCastigadosBSCS"
		reply-channel="ftpChannelOutCreditosCastigadosBSCS" command="mv"
		expression="'${ftpCreditosCastigados.remotedirectory}'+payload.getName()"
		rename-expression="'${ftpCreditosCastigados.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
		<int:poller fixed-rate="1000" max-messages-per-poll="-1" />
	</int-sftp:outbound-gateway>
	<int:channel id="ftpChannelOutCreditosCastigadosBSCS">
		<int:queue />
	</int:channel>

    <!-- BATCH APERTURA CREDITOS CASTIGADOS -->
    <int-sftp:inbound-channel-adapter id="ftpInboundAperturaCreditosCastigadosBSCS"
            channel="ftpchannelAperturaCreditosCastigadosBSCS" session-factory="csfbscs"
            filename-regex="${ftpAperturaCreditosCastigados.filenamePattern}"
            auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
            remote-directory="${ftpAperturaCreditosCastigados.remotedirectory}" temporary-file-suffix=".writing"
            local-directory="${ftpAperturaCreditosCastigados.localdirectory}">
            <int:poller cron="${ftpAperturaCreditosCastigados.cronExpressionInboud}"
                    max-messages-per-poll="-1" />
    </int-sftp:inbound-channel-adapter>
    <int:channel id="ftpchannelAperturaCreditosCastigadosBSCS">
            <int:queue />
    </int:channel>
    <int-sftp:outbound-gateway id="remoteftpLSftpChannelOutAperturaCreditosCastigadosBSCS"
            session-factory="csfbscs" request-channel="ftpchannelAperturaCreditosCastigadosBSCS"
            reply-channel="ftpChannelOutAperturaCreditosCastigadosBSCS" command="mv"
            expression="'${ftpAperturaCreditosCastigados.remotedirectory}'+payload.getName()"
            rename-expression="'${ftpAperturaCreditosCastigados.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
            <int:poller fixed-rate="1000" max-messages-per-poll="-1" />
    </int-sftp:outbound-gateway>
    <int:channel id="ftpChannelOutAperturaCreditosCastigadosBSCS">
            <int:queue />
    </int:channel>
	
    <!-- Auditoria SOX INI-->
    <int-sftp:inbound-channel-adapter id="ftpInboundAuditoriaSOXBSCS"
        channel="ftpchannelAuditoriaSOXBSCS" session-factory="csfbscs"
        filename-regex="${ftpAuditoriaSOXin.filenamePattern}"
        auto-create-local-directory="true" delete-remote-files="${ftpBscs.deleteRemoteFile}"
        remote-directory="${ftpAuditoriaSOXin.remotedirectory}" temporary-file-suffix=".writing"
        local-directory="${ftpAuditoriaSOXin.localdirectory}">
        <int:poller cron="${ftpAuditoriaSOXin.cronExpressionInboud}"
            max-messages-per-poll="-1" />
    </int-sftp:inbound-channel-adapter>
    <int:channel id="ftpchannelAuditoriaSOXBSCS">
        <int:queue />
    </int:channel>
    <int-sftp:outbound-gateway id="remoteftpLSftpChannelOutAuditoriaSOXBSCS"
        session-factory="csfbscs" request-channel="ftpchannelAuditoriaSOXBSCS"
        reply-channel="ftpChannelOutAuditoriaSOXBSCS" command="mv"
        expression="'${ftpAuditoriaSOXin.remotedirectory}'+payload.getName()"
        rename-expression="'${ftpAuditoriaSOXin.remotedirectoryCopy}'+payload.getName()+'_#{ T(java.lang.System).currentTimeMillis() }'+'_process'">
        <int:poller fixed-rate="1000" max-messages-per-poll="-1" />
    </int-sftp:outbound-gateway>
    <int:channel id="ftpChannelOutAuditoriaSOXBSCS">
        <int:queue />
    </int:channel>

	<!-- recovery log-->
	<int:channel id="failedChannelBscsInBound" />
	<int:chain input-channel="failedChannelBscsInBound">
		<int:transformer expression="'permanently failed:' + payload.failedMessage " />		
	</int:chain>
	<!-- Default retry advice 3 tries, no backoff, no recovery;
	     final failure will go to poller's error channel -->
	<beans profile="default">
		<int:handler-retry-advice id="retryAdviceBscsInBound" />
	</beans>
	<!-- Retry advice, template with default 3 tries, exponential backoff, no recovery;
	     final failure will go to poller's error channel -->
	<beans profile="backoff">
		<int:handler-retry-advice id="retryAdviceBscsInBound">
			<int:exponential-back-off initial="2000" multiplier="2" />
		</int:handler-retry-advice>
	</beans>
	<!-- Retry advice, template with default 3 tries, no backoff, recovery;
	     final handled by recovery instead of going to the poller's error channel -->
	<beans profile="recovery">
		<int:handler-retry-advice id="retryAdviceBscsInBound" recovery-channel="recoveryChannelBscsInBound" />

		<int:channel id="recoveryChannelBscsInBound" />

		<int:chain input-channel="recoveryChannelBscsInBound">
			<int:transformer expression="'permanently failed:' + '${payload.failedMessage.payload}' + ' handled by recovery'" />			
		</int:chain>
	</beans>
</beans>